-- Create a table for transactions
CREATE TABLE transactions (
    transaction_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    amount NUMERIC NOT NULL,
    transaction_date DATE NOT NULL
);

-- Insert some sample records
-- Insert transactions for user 1 for the year 2021
INSERT INTO transactions (user_id, amount, transaction_date) VALUES
(1, 100, '2021-01-15'),
(1, -50, '2021-02-10'),
(1, 75, '2021-03-20'),
(1, 80, '2021-04-05'),
(1, -30, '2021-05-15'),
(1, 120, '2021-06-20'),
(1, -70, '2021-07-10'),
(1, 50, '2021-08-25'),
(1, 90, '2021-09-12'),
(1, -60, '2021-10-30'),
(1, 110, '2021-11-05'),
(1, -40, '2021-12-20');

-- Insert transactions for user 2 for the year 2021
INSERT INTO transactions (user_id, amount, transaction_date) VALUES
(2, 200, '2021-01-20'),
(2, -100, '2021-02-05'),
(2, 150, '2021-03-25'),
(2, 90, '2021-04-10'),
(2, -40, '2021-05-15'),
(2, 120, '2021-06-20'),
(2, -60, '2021-07-05'),
(2, 80, '2021-08-25'),
(2, 100, '2021-09-15'),
(2, -30, '2021-10-30'),
(2, 150, '2021-11-10'),
(2, -70, '2021-12-20');


CREATE OR REPLACE FUNCTION check_balance() RETURNS TABLE (user_id INT, is_correct BOOLEAN) AS $$
DECLARE
    user_id_temp INT;  -- Temporary variable to hold user_id
    one_year_amount NUMERIC;
    current_amount NUMERIC;
BEGIN
    -- Loop through each distinct user ID
    FOR user_id_temp IN
        SELECT DISTINCT t.user_id FROM transactions t
    LOOP
        -- Calculate the sum of credits and debits for the user from Jan 2021 to Jan 2022
        SELECT 
            SUM(CASE WHEN t.amount > 0 THEN t.amount ELSE 0 END) - 
            SUM(CASE WHEN t.amount < 0 THEN t.amount ELSE 0 END) 
        INTO current_amount
        FROM transactions t
        WHERE t.user_id = user_id_temp 
        AND t.transaction_date >= '2021-01-01' 
        AND t.transaction_date <= '2022-01-31';

        -- Calculate the sum of one year's transactions
        SELECT 
            SUM(CASE WHEN t.amount > 0 THEN t.amount ELSE 0 END) - 
            SUM(CASE WHEN t.amount < 0 THEN t.amount ELSE 0 END) 
        INTO one_year_amount
        FROM transactions t
        WHERE t.user_id = user_id_temp 
        AND t.transaction_date >= CURRENT_DATE - INTERVAL '1 year' 
        AND t.transaction_date <= CURRENT_DATE;

        -- Check if the final amount matches the sum of one year's transactions
        IF current_amount = one_year_amount THEN
            RETURN QUERY SELECT user_id_temp, TRUE;
        ELSE
            RETURN QUERY SELECT user_id_temp, FALSE;
        END IF;
    END LOOP;
END;
$$ LANGUAGE plpgsql;



SELECT * FROM check_balance();
